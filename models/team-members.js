// This model was generated by Lumber. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const TeamMembers = sequelize.define('teamMembers', {
    state: {
      type: DataTypes.ENUM('requested','invited','rejected_at','accepted','blocked','expired'),
      allowNull: false,
    },
    requestedAt: {
      type: DataTypes.DATE,
    },
    invitedAt: {
      type: DataTypes.DATE,
    },
    rejectedAt: {
      type: DataTypes.DATE,
    },
    blockedAt: {
      type: DataTypes.DATE,
    },
    expiresAt: {
      type: DataTypes.DATE,
    },
    acceptedAt: {
      type: DataTypes.DATE,
    },
    role: {
      type: DataTypes.ENUM('user','admin'),
      defaultValue: "user",
      allowNull: false,
    },
    canUseForPayments: {
      type: DataTypes.INTEGER,
      defaultValue: 0,
      allowNull: false,
    },
    access: {
      type: DataTypes.ENUM('all','selected'),
      defaultValue: "all",
      allowNull: false,
    },
    kwhPriceType: {
      type: DataTypes.ENUM('fixed','spot'),
      defaultValue: "fixed",
      allowNull: false,
    },
    kwhPriceFixedPrice: {
      type: DataTypes.DOUBLE,
    },
    kwhPriceSpotOverheadPercentage: {
      type: DataTypes.DOUBLE,
    },
    kwhPriceSpotOverheadValue: {
      type: DataTypes.DOUBLE,
    },
    createdAt: {
      type: DataTypes.DATE,
    },
    updatedAt: {
      type: DataTypes.DATE,
    },
    deletedAt: {
      type: DataTypes.DATE,
    },
  }, {
    tableName: 'team_members',
    underscored: true,
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/v/v6/reference-guide/relationships#adding-relationships.
  TeamMembers.associate = (models) => {
    TeamMembers.belongsTo(models.users, {
      foreignKey: {
        name: 'userIdKey',
        field: 'user_id',
      },
      as: 'user',
    });
    TeamMembers.belongsTo(models.users, {
      foreignKey: {
        name: 'acceptedByUserIdKey',
        field: 'accepted_by_user_id',
      },
      as: 'acceptedByUser',
    });
    TeamMembers.belongsTo(models.users, {
      foreignKey: {
        name: 'blockedByUserIdKey',
        field: 'blocked_by_user_id',
      },
      as: 'blockedByUser',
    });
    TeamMembers.belongsTo(models.users, {
      foreignKey: {
        name: 'invitedByUserIdKey',
        field: 'invited_by_user_id',
      },
      as: 'invitedByUser',
    });
    TeamMembers.belongsTo(models.teamPriceGroups, {
      foreignKey: {
        name: 'priceGroupIdKey',
        field: 'price_group_id',
      },
      as: 'priceGroup',
    });
    TeamMembers.belongsTo(models.teams, {
      foreignKey: {
        name: 'teamIdKey',
        field: 'team_id',
      },
      as: 'team',
    });
  };

  return TeamMembers;
};
