// This model was generated by Lumber. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const Teams = sequelize.define('teams', {
    name: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    identifier: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    externalId: {
      type: DataTypes.STRING,
    },
    joinCode: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    type: {
      type: DataTypes.ENUM('personal','professional'),
      allowNull: false,
    },
    sourceId: {
      type: DataTypes.BIGINT,
    },
    sourceType: {
      type: DataTypes.STRING,
    },
    balance: {
      type: DataTypes.DOUBLE,
      defaultValue: Sequelize.literal('0.0000'),
      allowNull: false,
    },
    balanceCredit: {
      type: DataTypes.DOUBLE,
      defaultValue: Sequelize.literal('0.0000'),
      allowNull: false,
    },
    kwhPriceType: {
      type: DataTypes.ENUM('fixed','spot'),
      defaultValue: "fixed",
      allowNull: false,
    },
    kwhPriceFixedPrice: {
      type: DataTypes.DOUBLE,
    },
    kwhPriceSpotOverheadPercentage: {
      type: DataTypes.DOUBLE,
    },
    kwhPriceSpotOverheadValue: {
      type: DataTypes.DOUBLE,
    },
    operatorCutPercentage: {
      type: DataTypes.DOUBLE,
      allowNull: false,
    },
    email: {
      type: DataTypes.STRING,
    },
    companyName: {
      type: DataTypes.STRING,
    },
    financeEmail: {
      type: DataTypes.STRING,
    },
    vatNumber: {
      type: DataTypes.STRING,
    },
    autoAcceptInvitationRequests: {
      type: DataTypes.INTEGER,
      defaultValue: 0,
      allowNull: false,
    },
    autoGenerateChargePointGroups: {
      type: DataTypes.INTEGER,
      defaultValue: 1,
      allowNull: false,
    },
    maxChargePoints: {
      type: DataTypes.INTEGER,
    },
    autoRefill: {
      type: DataTypes.INTEGER,
      defaultValue: 0,
      allowNull: false,
    },
    autoRefillAmount: {
      type: DataTypes.DOUBLE,
    },
    blockedAt: {
      type: DataTypes.DATE,
    },
    activeMemberCount: {
      type: DataTypes.INTEGER,
      defaultValue: 0,
      allowNull: false,
    },
    deletedAt: {
      type: DataTypes.DATE,
    },
    createdAt: {
      type: DataTypes.DATE,
    },
    updatedAt: {
      type: DataTypes.DATE,
    },
  }, {
    tableName: 'teams',
    underscored: true,
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/v/v6/reference-guide/relationships#adding-relationships.
  Teams.associate = (models) => {
    Teams.belongsTo(models.operators, {
      foreignKey: {
        name: 'operatorIdKey',
        field: 'operator_id',
      },
      as: 'operator',
    });
    Teams.belongsTo(models.countries, {
      foreignKey: {
        name: 'countryIdKey',
        field: 'country_id',
      },
      as: 'country',
    });
    Teams.belongsTo(models.currencies, {
      foreignKey: {
        name: 'currencyIdKey',
        field: 'currency_id',
      },
      as: 'currency',
    });
    Teams.belongsTo(models.users, {
      foreignKey: {
        name: 'userIdKey',
        field: 'user_id',
      },
      as: 'user',
    });
    Teams.hasMany(models.chargePointAuthTokens, {
      foreignKey: {
        name: 'teamIdKey',
        field: 'team_id',
      },
      as: 'chargePointAuthTokens',
    });
    Teams.hasMany(models.chargePointGroups, {
      foreignKey: {
        name: 'teamIdKey',
        field: 'team_id',
      },
      as: 'chargePointGroups',
    });
    Teams.hasMany(models.chargePoints, {
      foreignKey: {
        name: 'teamIdKey',
        field: 'team_id',
      },
      as: 'chargePoints',
    });
    Teams.hasMany(models.charges, {
      foreignKey: {
        name: 'payingTeamIdKey',
        field: 'paying_team_id',
      },
      as: 'payingTeamCharges',
    });
    Teams.hasMany(models.teamMembers, {
      foreignKey: {
        name: 'teamIdKey',
        field: 'team_id',
      },
      as: 'teamMembers',
    });
    Teams.hasMany(models.teamPriceGroups, {
      foreignKey: {
        name: 'teamIdKey',
        field: 'team_id',
      },
      as: 'teamPriceGroups',
    });
  };

  return Teams;
};
