// This model was generated by Lumber. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const ChargePointIntegration = sequelize.define('chargePointIntegration', {
    state: {
      type: DataTypes.ENUM('pending','connected','disconnected','error'),
      defaultValue: "pending",
      allowNull: false,
    },
    credentials: {
      type: DataTypes.JSON,
      allowNull: false,
    },
    payload: {
      type: DataTypes.JSON,
      allowNull: false,
    },
    externalId: {
      type: DataTypes.STRING,
    },
    connectorId: {
      type: DataTypes.INTEGER,
    },
    lastConnectedAt: {
      type: DataTypes.DATE,
    },
    disconnectedAt: {
      type: DataTypes.DATE,
    },
    reconnectRequired: {
      type: DataTypes.INTEGER,
      defaultValue: 0,
      allowNull: false,
    },
    available: {
      type: DataTypes.INTEGER,
      defaultValue: 0,
      allowNull: false,
    },
    log: {
      type: DataTypes.STRING,
    },
    createdAt: {
      type: DataTypes.DATE,
    },
    updatedAt: {
      type: DataTypes.DATE,
    },
    deletedAt: {
      type: DataTypes.DATE,
    },
  }, {
    tableName: 'charge_point_integration',
    underscored: true,
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/v/v6/reference-guide/relationships#adding-relationships.
  ChargePointIntegration.associate = (models) => {
    ChargePointIntegration.belongsTo(models.chargePoints, {
      foreignKey: {
        name: 'chargePointIdKey',
        field: 'charge_point_id',
      },
      as: 'chargePoint',
    });
    ChargePointIntegration.belongsTo(models.chargePointIntegrations, {
      foreignKey: {
        name: 'integrationIdKey',
        field: 'integration_id',
      },
      as: 'integration',
    });
    ChargePointIntegration.hasMany(models.charges, {
      foreignKey: {
        name: 'chargePointIntegrationIdKey',
        field: 'charge_point_integration_id',
      },
      as: 'chargePointIntegrationCharges',
    });
  };

  return ChargePointIntegration;
};
