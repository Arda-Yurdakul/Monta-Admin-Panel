// This model was generated by Lumber. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const Vehicles = sequelize.define('vehicles', {
    identifier: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    name: {
      type: DataTypes.STRING,
    },
    licencePlate: {
      type: DataTypes.STRING,
    },
    capacityKwh: {
      type: DataTypes.DOUBLE,
    },
    maxKw: {
      type: DataTypes.DOUBLE,
    },
    defaultMaxBatteryPercentage: {
      type: DataTypes.INTEGER,
      defaultValue: 80,
      allowNull: false,
    },
    createdAt: {
      type: DataTypes.DATE,
    },
    updatedAt: {
      type: DataTypes.DATE,
    },
    deletedAt: {
      type: DataTypes.DATE,
    },
  }, {
    tableName: 'vehicles',
    underscored: true,
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/v/v6/reference-guide/relationships#adding-relationships.
  Vehicles.associate = (models) => {
    Vehicles.belongsTo(models.countries, {
      foreignKey: {
        name: 'countryIdKey',
        field: 'country_id',
      },
      as: 'country',
    });
    Vehicles.belongsToMany(models.users, {
      through: 'userVehicle',
      foreignKey: 'vehicle_id',
      otherKey: 'user_id',
      as: 'usersThroughUserVehicles',
    });
    Vehicles.belongsToMany(models.connectors, {
      through: 'vehicleConnector',
      foreignKey: 'vehicle_id',
      otherKey: 'connector_id',
      as: 'connectorsThroughVehicleConnectors',
    });
    Vehicles.hasMany(models.charges, {
      foreignKey: {
        name: 'vehicleIdKey',
        field: 'vehicle_id',
      },
      as: 'charges',
    });
  };

  return Vehicles;
};
