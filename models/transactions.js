// This model was generated by Lumber. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const Transactions = sequelize.define('transactions', {
    externalId: {
      type: DataTypes.STRING,
    },
    credit: {
      type: DataTypes.INTEGER,
      defaultValue: 0,
      allowNull: false,
    },
    fromType: {
      type: DataTypes.STRING,
    },
    fromId: {
      type: DataTypes.BIGINT,
    },
    fromAmount: {
      type: DataTypes.DOUBLE,
      allowNull: false,
    },
    fromAmountCreditTotal: {
      type: DataTypes.DOUBLE,
      defaultValue: Sequelize.literal('0.0000'),
      allowNull: false,
    },
    fromAmountCreditLeft: {
      type: DataTypes.DOUBLE,
      defaultValue: Sequelize.literal('0.0000'),
      allowNull: false,
    },
    fromCopy: {
      type: DataTypes.JSON,
      allowNull: false,
    },
    exchangeRate: {
      type: DataTypes.DOUBLE,
      allowNull: false,
    },
    type: {
      type: DataTypes.ENUM('internal','deposit','withdraw'),
      allowNull: false,
    },
    toType: {
      type: DataTypes.STRING,
    },
    toId: {
      type: DataTypes.BIGINT,
    },
    toCopy: {
      type: DataTypes.JSON,
      allowNull: false,
    },
    toAmount: {
      type: DataTypes.DOUBLE,
      allowNull: false,
    },
    note: {
      type: DataTypes.STRING,
    },
    referenceType: {
      type: DataTypes.STRING,
    },
    referenceId: {
      type: DataTypes.BIGINT,
    },
    purchaseType: {
      type: DataTypes.STRING,
    },
    purchaseId: {
      type: DataTypes.BIGINT,
    },
    state: {
      type: DataTypes.ENUM('complete','pending','failed','reserved'),
      defaultValue: "complete",
      allowNull: false,
    },
    pendingAt: {
      type: DataTypes.DATE,
    },
    completedAt: {
      type: DataTypes.DATE,
    },
    failedAt: {
      type: DataTypes.DATE,
    },
    failedReason: {
      type: DataTypes.STRING,
    },
    createdAt: {
      type: DataTypes.DATE,
    },
    updatedAt: {
      type: DataTypes.DATE,
    },
    deletedAt: {
      type: DataTypes.DATE,
    },
  }, {
    tableName: 'transactions',
    underscored: true,
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/v/v6/reference-guide/relationships#adding-relationships.
  Transactions.associate = (models) => {
    Transactions.belongsTo(models.devices, {
      foreignKey: {
        name: 'deviceIdKey',
        field: 'device_id',
      },
      as: 'device',
    });
    Transactions.belongsTo(models.currencies, {
      foreignKey: {
        name: 'fromCurrencyIdKey',
        field: 'from_currency_id',
      },
      as: 'fromCurrency',
    });
    Transactions.belongsTo(models.currencies, {
      foreignKey: {
        name: 'toCurrencyIdKey',
        field: 'to_currency_id',
      },
      as: 'toCurrency',
    });
    Transactions.hasMany(models.invoices, {
      foreignKey: {
        name: 'transactionIdKey',
        field: 'transaction_id',
      },
      as: 'invoices',
    });
    Transactions.hasMany(models.receipts, {
      foreignKey: {
        name: 'transactionIdKey',
        field: 'transaction_id',
      },
      as: 'receipts',
    });
  };

  return Transactions;
};
