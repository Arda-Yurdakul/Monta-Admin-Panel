// This model was generated by Lumber. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const Subscriptions = sequelize.define('subscriptions', {
    customerType: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    customerId: {
      type: DataTypes.BIGINT,
      allowNull: false,
    },
    state: {
      type: DataTypes.ENUM('pending','active','cancelling','cancelled'),
      allowNull: false,
    },
    nextPurchaseAt: {
      type: DataTypes.DATE,
    },
    pendingAt: {
      type: DataTypes.DATE,
    },
    activeAt: {
      type: DataTypes.DATE,
    },
    cancelledAt: {
      type: DataTypes.DATE,
    },
    endAt: {
      type: DataTypes.DATE,
    },
    discountPercentage: {
      type: DataTypes.DOUBLE,
      defaultValue: Sequelize.literal('0.0000'),
      allowNull: false,
    },
    discountAbsolute: {
      type: DataTypes.DOUBLE,
      defaultValue: Sequelize.literal('0.0000'),
      allowNull: false,
    },
    originalAmount: {
      type: DataTypes.DOUBLE,
      allowNull: false,
    },
    discountAmount: {
      type: DataTypes.DOUBLE,
      allowNull: false,
    },
    totalAmount: {
      type: DataTypes.DOUBLE,
      allowNull: false,
    },
    purchaseCount: {
      type: DataTypes.INTEGER,
      defaultValue: 0,
      allowNull: false,
    },
    chargePoints: {
      type: DataTypes.INTEGER,
      defaultValue: 0,
      allowNull: false,
    },
    note: {
      type: DataTypes.STRING,
    },
    agreementPath: {
      type: DataTypes.STRING,
    },
    payload: {
      type: DataTypes.JSON,
      allowNull: false,
    },
    createdAt: {
      type: DataTypes.DATE,
    },
    updatedAt: {
      type: DataTypes.DATE,
    },
    deletedAt: {
      type: DataTypes.DATE,
    },
  }, {
    tableName: 'subscriptions',
    underscored: true,
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/v/v6/reference-guide/relationships#adding-relationships.
  Subscriptions.associate = (models) => {
    Subscriptions.belongsTo(models.users, {
      foreignKey: {
        name: 'cancelledByUserIdKey',
        field: 'cancelled_by_user_id',
      },
      as: 'cancelledByUser',
    });
    Subscriptions.belongsTo(models.currencies, {
      foreignKey: {
        name: 'currencyIdKey',
        field: 'currency_id',
      },
      as: 'currency',
    });
    Subscriptions.belongsTo(models.operators, {
      foreignKey: {
        name: 'operatorIdKey',
        field: 'operator_id',
      },
      as: 'operator',
    });
    Subscriptions.belongsTo(models.plans, {
      foreignKey: {
        name: 'planIdKey',
        field: 'plan_id',
      },
      as: 'plan',
    });
    Subscriptions.belongsTo(models.planPrices, {
      foreignKey: {
        name: 'planPriceIdKey',
        field: 'plan_price_id',
      },
      as: 'planPrice',
    });
    Subscriptions.belongsTo(models.users, {
      foreignKey: {
        name: 'purchasedByUserIdKey',
        field: 'purchased_by_user_id',
      },
      as: 'purchasedByUser',
    });
    Subscriptions.hasMany(models.subscriptionPurchases, {
      foreignKey: {
        name: 'subscriptionIdKey',
        field: 'subscription_id',
      },
      as: 'subscriptionPurchases',
    });
    Subscriptions.hasMany(models.taxRefunds, {
      foreignKey: {
        name: 'subscriptionIdKey',
        field: 'subscription_id',
      },
      as: 'taxRefunds',
    });
  };

  return Subscriptions;
};
