// This model was generated by Lumber. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const Countries = sequelize.define('countries', {
    name: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    code3: {
      type: DataTypes.STRING,
      field: 'code_3',
      allowNull: false,
    },
    code2: {
      type: DataTypes.STRING,
      field: 'code_2',
      allowNull: false,
    },
    phoneCode: {
      type: DataTypes.STRING,
      field: 'phone_code',
    },
    flagPath: {
      type: DataTypes.STRING,
      field: 'flag_path',
    },
    configSpotPrices: {
      type: DataTypes.INTEGER,
      field: 'config_spot_prices',
      defaultValue: 0,
      allowNull: false,
    },
    configCo2Commissions: {
      type: DataTypes.INTEGER,
      field: 'config_co2_commissions',
      defaultValue: 0,
      allowNull: false,
    },
    configRenewables: {
      type: DataTypes.INTEGER,
      field: 'config_renewables',
      defaultValue: 0,
      allowNull: false,
    },
    configSmartCharging: {
      type: DataTypes.INTEGER,
      field: 'config_smart_charging',
      defaultValue: 0,
      allowNull: false,
    },
    configWithdrawMin: {
      type: DataTypes.DOUBLE,
      field: 'config_withdraw_min',
      allowNull: false,
    },
    configWithdrawMax: {
      type: DataTypes.DOUBLE,
      field: 'config_withdraw_max',
      allowNull: false,
    },
    configDepositMin: {
      type: DataTypes.DOUBLE,
      field: 'config_deposit_min',
      allowNull: false,
    },
    configDepositMax: {
      type: DataTypes.DOUBLE,
      field: 'config_deposit_max',
      allowNull: false,
    },
    configWalletNegativeBalanceThreshold: {
      type: DataTypes.DOUBLE,
      field: 'config_wallet_negative_balance_threshold',
      allowNull: false,
    },
    configKwhFixedPriceMax: {
      type: DataTypes.DOUBLE,
      field: 'config_kwh_fixed_price_max',
      allowNull: false,
    },
    configKwhSpotPriceOverheadPercentageMax: {
      type: DataTypes.DOUBLE,
      field: 'config_kwh_spot_price_overhead_percentage_max',
      allowNull: false,
    },
    configKwhSpotPriceOverheadValueMax: {
      type: DataTypes.DOUBLE,
      field: 'config_kwh_spot_price_overhead_value_max',
      allowNull: false,
    },
    configAutofillAmountMin: {
      type: DataTypes.DOUBLE,
      field: 'config_autofill_amount_min',
      allowNull: false,
    },
    configAutofillAmountMax: {
      type: DataTypes.DOUBLE,
      field: 'config_autofill_amount_max',
      allowNull: false,
    },
    configMinChargeAmountBeforePayment: {
      type: DataTypes.DOUBLE,
      field: 'config_min_charge_amount_before_payment',
      defaultValue: Sequelize.literal('3.0000'),
      allowNull: false,
    },
    deletedAt: {
      type: DataTypes.DATE,
      field: 'deleted_at',
    },
    createdAt: {
      type: DataTypes.DATE,
      field: 'created_at',
    },
    updatedAt: {
      type: DataTypes.DATE,
      field: 'updated_at',
    },
  }, {
    tableName: 'countries',
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/v/v6/reference-guide/relationships#adding-relationships.
  Countries.associate = (models) => {
    Countries.belongsTo(models.currencies, {
      foreignKey: {
        name: 'currencyIdKey',
        field: 'currency_id',
      },
      as: 'currency',
    });
    Countries.hasMany(models.bankAccounts, {
      foreignKey: {
        name: 'countryIdKey',
        field: 'country_id',
      },
      as: 'bankAccounts',
    });
    Countries.hasMany(models.chargePointGroups, {
      foreignKey: {
        name: 'countryIdKey',
        field: 'country_id',
      },
      as: 'chargePointGroups',
    });
    Countries.hasMany(models.chargePoints, {
      foreignKey: {
        name: 'countryIdKey',
        field: 'country_id',
      },
      as: 'chargePoints',
    });
    Countries.hasMany(models.countryAreas, {
      foreignKey: {
        name: 'countryIdKey',
        field: 'country_id',
      },
      as: 'countryAreas',
    });
    Countries.hasMany(models.gridCo2Emissions, {
      foreignKey: {
        name: 'countryIdKey',
        field: 'country_id',
      },
      as: 'gridCo2Emissions',
    });
    Countries.hasMany(models.gridRenewables, {
      foreignKey: {
        name: 'countryIdKey',
        field: 'country_id',
      },
      as: 'gridRenewables',
    });
    Countries.hasMany(models.gridSpotPrices, {
      foreignKey: {
        name: 'countryIdKey',
        field: 'country_id',
      },
      as: 'gridSpotPrices',
    });
    Countries.hasMany(models.hubjectOperatorPrices, {
      foreignKey: {
        name: 'countryIdKey',
        field: 'country_id',
      },
      as: 'hubjectOperatorPrices',
    });
    Countries.hasMany(models.operators, {
      foreignKey: {
        name: 'countryIdKey',
        field: 'country_id',
      },
      as: 'operators',
    });
    Countries.hasMany(models.plans, {
      foreignKey: {
        name: 'countryIdKey',
        field: 'country_id',
      },
      as: 'plans',
    });
    Countries.hasMany(models.stripePaymentIntents, {
      foreignKey: {
        name: 'countryIdKey',
        field: 'country_id',
      },
      as: 'stripePaymentIntents',
    });
    Countries.hasMany(models.teams, {
      foreignKey: {
        name: 'countryIdKey',
        field: 'country_id',
      },
      as: 'teams',
    });
    Countries.hasMany(models.users, {
      foreignKey: {
        name: 'countryIdKey',
        field: 'country_id',
      },
      as: 'users',
    });
    Countries.hasMany(models.vehicles, {
      foreignKey: {
        name: 'countryIdKey',
        field: 'country_id',
      },
      as: 'vehicles',
    });
  };

  return Countries;
};
