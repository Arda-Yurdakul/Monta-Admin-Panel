// This model was generated by Lumber. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const ChargePointReadings = sequelize.define('chargePointReadings', {
    totalKwh: {
      type: DataTypes.DOUBLE,
      field: 'total_kwh',
    },
    source: {
      type: DataTypes.STRING,
    },
    log: {
      type: DataTypes.STRING,
    },
    lastOnlineAt: {
      type: DataTypes.DATE,
      field: 'last_online_at',
    },
    imagePath1: {
      type: DataTypes.STRING,
      field: 'image_path1',
    },
    imagePath2: {
      type: DataTypes.STRING,
      field: 'image_path2',
    },
    imagePath3: {
      type: DataTypes.STRING,
      field: 'image_path3',
    },
    approvedAt: {
      type: DataTypes.DATE,
      field: 'approved_at',
    },
    declinedAt: {
      type: DataTypes.DATE,
      field: 'declined_at',
    },
    createdAt: {
      type: DataTypes.DATE,
      field: 'created_at',
    },
    updatedAt: {
      type: DataTypes.DATE,
      field: 'updated_at',
    },
    deletedAt: {
      type: DataTypes.DATE,
      field: 'deleted_at',
    },
    declinedReason: {
      type: DataTypes.STRING,
      field: 'declined_reason',
    },
  }, {
    tableName: 'charge_point_readings',
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/v/v6/reference-guide/relationships#adding-relationships.
  ChargePointReadings.associate = (models) => {
    ChargePointReadings.belongsTo(models.users, {
      foreignKey: {
        name: 'approvedByUserIdKey',
        field: 'approved_by_user_id',
      },
      as: 'approvedByUser',
    });
    ChargePointReadings.belongsTo(models.chargePoints, {
      foreignKey: {
        name: 'chargePointIdKey',
        field: 'charge_point_id',
      },
      as: 'chargePoint',
    });
    ChargePointReadings.belongsTo(models.users, {
      foreignKey: {
        name: 'declinedByUserIdKey',
        field: 'declined_by_user_id',
      },
      as: 'declinedByUser',
    });
    ChargePointReadings.belongsTo(models.users, {
      foreignKey: {
        name: 'userIdKey',
        field: 'user_id',
      },
      as: 'user',
    });
  };

  return ChargePointReadings;
};
