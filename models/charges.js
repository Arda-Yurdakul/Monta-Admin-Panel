// This model was generated by Lumber. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const Charges = sequelize.define('charges', {
    externalId: {
      type: DataTypes.STRING,
      field: 'external_id',
    },
    state: {
      type: DataTypes.STRING,
    },
    scheduledStartAt: {
      type: DataTypes.DATE,
      field: 'scheduled_start_at',
    },
    startingAt: {
      type: DataTypes.DATE,
      field: 'starting_at',
    },
    chargingAt: {
      type: DataTypes.DATE,
      field: 'charging_at',
    },
    stoppingAt: {
      type: DataTypes.DATE,
      field: 'stopping_at',
    },
    stoppedAt: {
      type: DataTypes.DATE,
      field: 'stopped_at',
    },
    completedAt: {
      type: DataTypes.DATE,
      field: 'completed_at',
    },
    fullyChargedAt: {
      type: DataTypes.DATE,
      field: 'fully_charged_at',
    },
    releasedAt: {
      type: DataTypes.DATE,
      field: 'released_at',
    },
    hideAt: {
      type: DataTypes.DATE,
      field: 'hide_at',
    },
    failedAt: {
      type: DataTypes.DATE,
      field: 'failed_at',
    },
    failedReason: {
      type: DataTypes.STRING,
      field: 'failed_reason',
    },
    stoppedReason: {
      type: DataTypes.STRING,
      field: 'stopped_reason',
    },
    estimatedCompletedAt: {
      type: DataTypes.DATE,
      field: 'estimated_completed_at',
    },
    plannedPickupAt: {
      type: DataTypes.DATE,
      field: 'planned_pickup_at',
    },
    sourceId: {
      type: DataTypes.BIGINT,
      field: 'source_id',
    },
    sourceType: {
      type: DataTypes.STRING,
      field: 'source_type',
    },
    paymentType: {
      type: DataTypes.STRING,
      field: 'payment_type',
    },
    paymentId: {
      type: DataTypes.BIGINT,
      field: 'payment_id',
    },
    estimatedKwh: {
      type: DataTypes.DOUBLE,
      field: 'estimated_kwh',
    },
    estimatedPrice: {
      type: DataTypes.DOUBLE,
      field: 'estimated_price',
    },
    paymentMethod: {
      type: DataTypes.ENUM('free','team-has-fund','team-has-auto-refill','source','payment'),
      field: 'payment_method',
      allowNull: false,
    },
    kwhCostType: {
      type: DataTypes.ENUM('fixed','spot'),
      field: 'kwh_cost_type',
      defaultValue: "fixed",
      allowNull: false,
    },
    kwhCostFixedPrice: {
      type: DataTypes.DOUBLE,
      field: 'kwh_cost_fixed_price',
    },
    kwhCostSpotOverheadPercentage: {
      type: DataTypes.DOUBLE,
      field: 'kwh_cost_spot_overhead_percentage',
    },
    kwhCostSpotOverheadValue: {
      type: DataTypes.DOUBLE,
      field: 'kwh_cost_spot_overhead_value',
    },
    kwhPriceType: {
      type: DataTypes.ENUM('fixed','spot'),
      field: 'kwh_price_type',
      defaultValue: "fixed",
      allowNull: false,
    },
    kwhPriceFixedPrice: {
      type: DataTypes.DOUBLE,
      field: 'kwh_price_fixed_price',
    },
    kwhPriceSpotOverheadPercentage: {
      type: DataTypes.DOUBLE,
      field: 'kwh_price_spot_overhead_percentage',
    },
    kwhPriceSpotOverheadValue: {
      type: DataTypes.DOUBLE,
      field: 'kwh_price_spot_overhead_value',
    },
    kwh: {
      type: DataTypes.DOUBLE,
      defaultValue: Sequelize.literal('1.0000'),
    },
    price: {
      type: DataTypes.DOUBLE,
      defaultValue: Sequelize.literal('1.0000'),
    },
    cost: {
      type: DataTypes.DOUBLE,
    },
    co2: {
      type: DataTypes.DOUBLE,
    },
    avgCo2Kwh: {
      type: DataTypes.DOUBLE,
      field: 'avg_co2_kwh',
    },
    avgPriceKwh: {
      type: DataTypes.DOUBLE,
      field: 'avg_price_kwh',
    },
    avgRenewable: {
      type: DataTypes.DOUBLE,
      field: 'avg_renewable',
    },
    externalPayload: {
      type: DataTypes.JSON,
      field: 'external_payload',
      allowNull: false,
    },
    kwhs: {
      type: DataTypes.JSON,
      allowNull: false,
    },
    prices: {
      type: DataTypes.JSON,
      allowNull: false,
    },
    co2S: {
      type: DataTypes.JSON,
      field: 'co2s',
      allowNull: false,
    },
    renewables: {
      type: DataTypes.JSON,
      allowNull: false,
    },
    kwhLimit: {
      type: DataTypes.DOUBLE,
      field: 'kwh_limit',
    },
    note: {
      type: DataTypes.STRING,
    },
    createdAt: {
      type: DataTypes.DATE,
      field: 'created_at',
    },
    updatedAt: {
      type: DataTypes.DATE,
      field: 'updated_at',
    },
  }, {
    tableName: 'charges',
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/v/v6/reference-guide/relationships#adding-relationships.
  Charges.associate = (models) => {
    Charges.belongsTo(models.chargePoints, {
      foreignKey: {
        name: 'chargePointIdKey',
        field: 'charge_point_id',
      },
      as: 'chargePoint',
    });
    Charges.belongsTo(models.chargePointAuthTokens, {
      foreignKey: {
        name: 'chargePointAuthTokenIdKey',
        field: 'charge_point_auth_token_id',
      },
      as: 'chargePointAuthToken',
    });
    Charges.belongsTo(models.chargePointIntegration, {
      foreignKey: {
        name: 'chargePointIntegrationIdKey',
        field: 'charge_point_integration_id',
      },
      as: 'chargePointIntegration',
    });
    Charges.belongsTo(models.currencies, {
      foreignKey: {
        name: 'currencyIdKey',
        field: 'currency_id',
      },
      as: 'currency',
    });
    Charges.belongsTo(models.teams, {
      foreignKey: {
        name: 'payingTeamIdKey',
        field: 'paying_team_id',
      },
      as: 'payingTeam',
    });
    Charges.belongsTo(models.chargeSmartCharges, {
      foreignKey: {
        name: 'smartChargeIdKey',
        field: 'smart_charge_id',
      },
      as: 'smartCharge',
    });
    Charges.belongsTo(models.users, {
      foreignKey: {
        name: 'userIdKey',
        field: 'user_id',
      },
      as: 'user',
    });
    Charges.belongsTo(models.vehicles, {
      foreignKey: {
        name: 'vehicleIdKey',
        field: 'vehicle_id',
      },
      as: 'vehicle',
    });
  };

  return Charges;
};
